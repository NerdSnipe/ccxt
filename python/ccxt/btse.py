# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.btse import ImplicitAPI
import hashlib
from ccxt.base.types import Balances, Currency, Int, Market, Order, OrderSide, OrderType, Position, Str, TransferEntry
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import DuplicateOrderId
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.errors import ExchangeNotAvailable
from ccxt.base.errors import InvalidNonce
from ccxt.base.decimal_to_precision import TICK_SIZE


class btse(Exchange, ImplicitAPI):

    def nonce(self):
        return self.milliseconds()

    def describe(self):
        return self.deep_extend(super(btse, self).describe(), {
            'id': 'btse',
            'name': 'BTSE',
            'countries': ['KY'],
            'rateLimit': 67,
            'version': 'v2.3',
            'certified': False,
            'pro': False,
            'has': {
                'CORS': None,
                'spot': True,
                'margin': False,
                'swap': True,
                'future': True,
                'option': False,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'createOrder': True,
                'editOrder': True,
                'fetchBalance': True,
                'fetchCurrencies': False,
                'fetchMarkets': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchPositions': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTrades': True,
                'fetchTransfers': False,
                'sandbox': True,
                'setLeverage': True,
                'setMarginMode': False,
                'transfer': True,
            },
            'features': {
                'swap': {
                    'linear': {
                        'sandbox': True,
                        'createOrder': {
                            'marginMode': False,
                            'triggerPrice': True,
                            'triggerPriceType': None,
                            'triggerDirection': False,
                            'stopLossPrice': True,
                            'takeProfitPrice': True,
                            'attachedStopLossTakeProfit': None,
                            'timeInForce': {
                                'GTC': True,
                                'IOC': True,
                                'FOK': True,
                                'PO': True,
                                'GTD': False,
                            },
                            'postOnly': True,
                            'reduceOnly': True,
                            'hedged': False,
                            'trailing': False,
                            'iceberg': False,
                            'leverage': False,
                            'marketBuyRequiresPrice': False,
                            'marketBuyByCost': True,
                        },
                        'createOrders': {
                            'max': 1,
                        },
                        'fetchMyTrades': {
                            'marginMode': False,
                            'limit': 500,
                            'daysBack': None,
                            'untilDays': None,
                            'symbolRequired': False,
                        },
                        'fetchOrder': {
                            'marginMode': False,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': True,
                        },
                        'fetchOpenOrders': {
                            'marginMode': False,
                            'limit': None,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchOrders': None,
                        'fetchClosedOrders': None,
                        'fetchOHLCV': {
                            'limit': None,
                        },
                    },
                },
            },
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '4h': '240',
                '6h': '360',
                '12h': '720',
                '1d': '1440',
                '3d': '4320',
                '1w': '10080',
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/104117773-c7b2f880-52f4-11eb-8f2c-c21a4c626a32.jpg',
                'test': {
                    'public': 'https://testapi.btse.io/futures',
                    'private': 'https://testapi.btse.io/futures',
                    'publicSpot': 'https://testapi.btse.io/spot',
                    'privateSpot': 'https://testapi.btse.io/spot',
                },
                'api': {
                    'public': 'https://api.btse.com/futures',
                    'private': 'https://api.btse.com/futures',
                    'publicSpot': 'https://api.btse.com/spot',
                    'privateSpot': 'https://api.btse.com/spot',
                },
                'www': 'https://www.btse.com',
                'doc': [
                    'https://btsecom.github.io/docs/futuresV2_3/en/',
                    'https://btsecom.github.io/docs/spotV3_3/en/',
                ],
                'fees': 'https://www.btse.com/en/fees',
            },
            'api': {
                'public': {
                    'get': [
                        'api/v2.3/market_summary',
                        'api/v2.3/ohlcv',
                        'api/v2.3/price',
                        'api/v2.3/orderbook',
                        'api/v2.3/trades',
                    ],
                },
                'publicSpot': {
                    'get': [
                        'api/v3.2/market_summary',
                        'api/v3.2/ohlcv',
                        'api/v3.2/price',
                        'api/v3.2/orderbook/L2',
                        'api/v3.2/trades',
                    ],
                },
                'private': {
                    'get': [
                        'api/v2.3/user/wallet',
                        'api/v2.3/user/wallet_history',
                        'api/v2.3/user/open_orders',
                        'api/v2.3/user/positions',
                        'api/v2.3/user/trade_history',
                    ],
                    'post': [
                        'api/v2.3/order',
                        'api/v2.3/user/wallet/transfer',
                        'api/v2.3/leverage',
                        'api/v2.3/position_mode',
                    ],
                    'put': [
                        'api/v2.3/order',
                    ],
                    'delete': [
                        'api/v2.3/order',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'tierBased': True,
                    'percentage': True,
                    'maker': self.parse_number('0.0006'),
                    'taker': self.parse_number('0.0010'),
                },
            },
            'exceptions': {
                'exact': {
                    'INVALID_SYMBOL': BadSymbol,
                    'SYMBOL_NOT_FOUND': BadSymbol,
                    'INSUFFICIENT_BALANCE': InsufficientFunds,
                    'INSUFFICIENT_MARGIN': InsufficientFunds,
                    'INVALID_ORDER_SIZE': InvalidOrder,
                    'INVALID_PRICE': InvalidOrder,
                    'ORDER_SIZE_TOO_SMALL': InvalidOrder,
                    'ORDER_SIZE_TOO_LARGE': InvalidOrder,
                    'PRICE_TOO_HIGH': InvalidOrder,
                    'PRICE_TOO_LOW': InvalidOrder,
                    'ORDER_NOT_FOUND': OrderNotFound,
                    'ORDER_ALREADY_FILLED': OrderNotFound,
                    'ORDER_ALREADY_CANCELLED': OrderNotFound,
                    'RATE_LIMIT_EXCEEDED': RateLimitExceeded,
                    'TOO_MANY_REQUESTS': RateLimitExceeded,
                    'INVALID_API_KEY': AuthenticationError,
                    'INVALID_SIGNATURE': AuthenticationError,
                    'API_KEY_EXPIRED': AuthenticationError,
                    'PERMISSION_DENIED': PermissionDenied,
                    'IP_RESTRICTED': PermissionDenied,
                    'MARKET_CLOSED': InvalidOrder,
                    'MAINTENANCE_MODE': ExchangeNotAvailable,
                    'INVALID_NONCE': InvalidNonce,
                    'DUPLICATE_ORDER_ID': DuplicateOrderId,
                },
                'broad': {
                    'rate limit': RateLimitExceeded,
                    'too many': RateLimitExceeded,
                    'insufficient': InsufficientFunds,
                    'invalid': InvalidOrder,
                    'not found': OrderNotFound,
                    'permission': PermissionDenied,
                    'authentication': AuthenticationError,
                    'signature': AuthenticationError,
                    'maintenance': ExchangeNotAvailable,
                },
            },
            'precisionMode': TICK_SIZE,
            'options': {
                'sandboxMode': False,
            },
        })

    def after_construct(self):
        super(btse, self).after_construct()
        whitelabelDomain = self.safe_string(self.options, 'whitelabel_domain')
        if whitelabelDomain is not None:
            testPublic = 'https://testapi.' + whitelabelDomain + '/futures'
            testPrivate = 'https://testapi.' + whitelabelDomain + '/futures'
            apiPublic = 'https://api.' + whitelabelDomain + '/futures'
            apiPrivate = 'https://api.' + whitelabelDomain + '/futures'
            self.urls['test'] = {
                'public': testPublic,
                'private': testPrivate,
            }
            self.urls['api'] = {
                'public': apiPublic,
                'private': apiPrivate,
            }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        request = '/' + self.implode_params(path, params)
        url = self.urls['api'][api] + request
        query = self.omit(params, self.extract_params(path))
        isPublic = (api == 'public') or (api == 'publicSpot')
        if isPublic:
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            nonce = str(self.nonce())
            bodyStr = ''
            if method == 'POST' or method == 'PUT':
                if query:
                    body = self.json(query)
                    bodyStr = body
            elif query:
                # Add query parameters to URL only, NOT to signature
                url += '?' + self.urlencode(query)
            # Signature: path + nonce + body(query params NOT included in signature)
            auth = request + nonce + bodyStr
            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384, 'hex')
            headers = {
                'request-api': self.apiKey,
                'request-nonce': nonce,
                'request-sign': signature,
                'Content-Type': 'application/json',
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code: int, reason: str, url: str, method: str, headers: dict, body: str, response, requestHeaders, requestBody):
        if response is None:
            return None
        errorCode = self.safe_string(response, 'errorCode')
        message = self.safe_string(response, 'message', '')
        if errorCode is not None:
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, feedback)
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            raise ExchangeError(feedback)
        return None

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for btse

        https://btsecom.github.io/docs/futuresV2_3/en/#market-summary
        https://btsecom.github.io/docs/spotV3_3/en/#market-summary

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of objects representing market data
        """
        # Fetch both SPOT and FUTURES markets
        promises = [
            self.publicGetApiV23MarketSummary(params),  # FUTURES
            self.publicSpotGetApiV32MarketSummary(params),  # SPOT
        ]
        responses = promises
        futuresResponse = responses[0]
        spotResponse = responses[1]
        result = []
        # Parse FUTURES markets
        for i in range(0, len(futuresResponse)):
            market = futuresResponse[i]
            parsed = self.parse_market(market)
            result.append(parsed)
        # Parse SPOT markets
        for i in range(0, len(spotResponse)):
            market = spotResponse[i]
            parsed = self.parse_market(market)
            result.append(parsed)
        return result

    def parse_market(self, market) -> Market:
        id = self.safe_string(market, 'symbol')
        baseId = self.safe_string(market, 'base')
        quoteId = self.safe_string(market, 'quote')
        base = self.safe_currency_code(baseId)
        quote = self.safe_currency_code(quoteId)
        active = self.safe_bool(market, 'active', True)
        minPriceIncrement = self.safe_string(market, 'minPriceIncrement')
        minSizeIncrement = self.safe_string(market, 'minSizeIncrement')
        minOrderSize = self.safe_string(market, 'minOrderSize')
        maxOrderSize = self.safe_string(market, 'maxOrderSize')
        contractSize = self.safe_string(market, 'contractSize', '1')
        # Detect market type from data
        futures = self.safe_bool(market, 'futures', False)
        type = 'swap' if futures else 'spot'
        spot = (type == 'spot')
        swap = (type == 'swap')
        symbol = None
        settle = None
        settleId = None
        if spot:
            # SPOT: BTC/USDT
            symbol = base + '/' + quote
            settle = None
            settleId = None
        else:
            # FUTURES: BTC/USDT:USDT
            symbol = base + '/' + quote + ':' + quote
            settle = quote
            settleId = quoteId
        return {
            'id': id,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': settleId,
            'type': type,
            'spot': spot,
            'margin': False,
            'swap': swap,
            'future': False,
            'option': False,
            'active': active,
            'contract': swap,
            'linear': True if swap else None,
            'inverse': False if swap else None,
            'contractSize': self.parse_number(contractSize) if swap else None,
            'expiry': None,
            'expiryDatetime': None,
            'strike': None,
            'optionType': None,
            'precision': {
                'amount': self.parse_number(minSizeIncrement),
                'price': self.parse_number(minPriceIncrement),
            },
            'limits': {
                'leverage': {
                    'min': None,
                    'max': None,
                },
                'amount': {
                    'min': self.parse_number(minOrderSize),
                    'max': self.parse_number(maxOrderSize),
                },
                'price': {
                    'min': self.parse_number(minPriceIncrement),
                    'max': None,
                },
                'cost': {
                    'min': None,
                    'max': None,
                },
            },
            'created': None,
            'info': market,
        }

    def fetch_ticker(self, symbol: str, params={}):
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market

        https://btsecom.github.io/docs/futuresV2_3/en/#market-summary

        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = None
        if market['spot']:
            response = self.publicSpotGetApiV32MarketSummary(self.extend(request, params))
        else:
            response = self.publicGetApiV23MarketSummary(self.extend(request, params))
        ticker = self.safe_dict(response, 0)
        return self.parse_ticker(ticker, market)

    def parse_ticker(self, ticker, market: Market = None):
        marketId = self.safe_string(ticker, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        last = self.safe_string(ticker, 'last')
        percentage = self.safe_string(ticker, 'percentageChange')
        baseVolume = self.safe_string(ticker, 'volume')
        high = self.safe_string(ticker, 'high24Hr')
        low = self.safe_string(ticker, 'low24Hr')
        bid = self.safe_string(ticker, 'highestBid')
        ask = self.safe_string(ticker, 'lowestAsk')
        size = self.safe_string(ticker, 'size')
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': None,
            'datetime': None,
            'high': high,
            'low': low,
            'bid': bid,
            'bidVolume': None,
            'ask': ask,
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': percentage,
            'average': None,
            'baseVolume': baseVolume,
            'quoteVolume': size,
            'info': ticker,
        }, market)

    def fetch_order_book(self, symbol: str, limit: Int = None, params={}):
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data

        https://btsecom.github.io/docs/futuresV2_3/en/#orderbook

        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.group]: orderbook grouping level(0-8)
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = None
        if market['spot']:
            response = self.publicSpotGetApiV32OrderbookL2(self.extend(request, params))
        else:
            response = self.publicGetApiV23Orderbook(self.extend(request, params))
        timestamp = self.safe_integer(response, 'timestamp')
        return self.parse_order_book(response, symbol, timestamp, 'buyQuote', 'sellQuote', 'price', 'size')

    def fetch_trades(self, symbol: str, since: Int = None, limit: Int = None, params={}):
        """
        get the list of most recent trades for a particular symbol

        https://btsecom.github.io/docs/futuresV2_3/en/#trades

        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.until]: timestamp in ms of the latest trade to fetch
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'count': limit is not limit if None else 100,
        }
        if since is not None:
            request['startTime'] = since
        until = self.safe_integer(params, 'until')
        if until is not None:
            params = self.omit(params, 'until')
            request['endTime'] = until
        response = None
        if market['spot']:
            response = self.publicSpotGetApiV32Trades(self.extend(request, params))
        else:
            response = self.publicGetApiV23Trades(self.extend(request, params))
        return self.parse_trades(response, market, since, limit)

    def parse_trade(self, trade, market: Market = None):
        marketId = self.safe_string(trade, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        timestamp = self.safe_integer(trade, 'timestamp')
        side = self.safe_string_lower(trade, 'side')
        priceString = self.safe_string_2(trade, 'filledPrice', 'price')
        amountString = self.safe_string_2(trade, 'filledSize', 'size')
        id = self.safe_string_2(trade, 'tradeId', 'serialId')
        orderId = self.safe_string(trade, 'orderId')
        feeAmount = self.safe_string(trade, 'feeAmount')
        feeCurrency = self.safe_string(trade, 'feeCurrency')
        fee = (feeAmount is not None) ? {
            'cost': feeAmount,
            'currency': self.safe_currency_code(feeCurrency),
        } : None
        costString = self.safe_string(trade, 'total')
        return self.safe_trade({
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'type': None,
            'side': side,
            'order': orderId,
            'takerOrMaker': None,
            'price': priceString,
            'amount': amountString,
            'cost': costString,
            'fee': fee,
        }, market)

    def fetch_ohlcv(self, symbol: str, timeframe='1m', since: Int = None, limit: Int = None, params={}):
        """
        fetches historical candlestick data containing the open, high, low, close price, and the volume of a market

        https://btsecom.github.io/docs/futuresV2_3/en/#ohlcv

        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.until]: timestamp in ms of the latest candle to fetch
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'resolution': self.safe_string(self.timeframes, timeframe, timeframe),
        }
        if since is not None:
            request['start'] = since
        until = self.safe_integer(params, 'until')
        if until is not None:
            params = self.omit(params, 'until')
            request['end'] = until
        response = None
        if market['spot']:
            response = self.publicSpotGetApiV32Ohlcv(self.extend(request, params))
        else:
            response = self.publicGetApiV23Ohlcv(self.extend(request, params))
        return self.parse_ohlcvs(response, market, timeframe, since, limit)

    def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders

        https://btsecom.github.io/docs/futuresV2_3/en/#wallet

        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.wallet]: wallet name, defaults to 'CROSS@'
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        self.load_markets()
        wallet = self.safe_string(params, 'wallet', 'CROSS@')
        request: dict = {
            'wallet': wallet,
        }
        response = self.privateGetApiV23UserWallet(self.extend(request, params))
        return self.parse_balance(response)

    def parse_balance(self, response) -> Balances:
        result: dict = {
            'info': response,
        }
        wallets = self.safe_list(response, 0, [])
        if len(wallets) == 0:
            return self.safe_balance(result)
        wallet = self.safe_dict(response, 0)
        assets = self.safe_list(wallet, 'assets', [])
        for i in range(0, len(assets)):
            asset = assets[i]
            currencyId = self.safe_string(asset, 'currency')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['total'] = self.safe_string(asset, 'balance')
            result[code] = account
        availableBalance = self.safe_string(wallet, 'availableBalance')
        marginBalance = self.safe_string(wallet, 'marginBalance')
        if availableBalance is not None or marginBalance is not None:
            result['free'] = availableBalance
            result['used'] = marginBalance
            result['total'] = self.safe_string(wallet, 'totalValue')
        return self.safe_balance(result)

    def create_order(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: float = None, params={}) -> Order:
        """
        create a trade order

        https://btsecom.github.io/docs/futuresV2_3/en/#order

        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much you want to trade in units of the base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.timeInForce]: 'GTC', 'IOC', 'FOK', or 'PO'
        :param bool [params.postOnly]: True or False
        :param bool [params.reduceOnly]: True or False
        :param float [params.triggerPrice]: price to trigger stop orders
        :param float [params.stopPrice]: price for OCO orders
        :param float [params.takeProfitPrice]: take profit trigger price
        :param float [params.stopLossPrice]: stop loss trigger price
        :param str [params.clOrderID]: client order ID
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        uppercaseType = type.upper()
        uppercaseSide = side.upper()
        request: dict = {
            'symbol': market['id'],
            'side': uppercaseSide,
            'type': uppercaseType,
            'size': self.amount_to_precision(symbol, amount),
        }
        if uppercaseType == 'LIMIT':
            if price is None:
                raise InvalidOrder(self.id + ' createOrder() requires a price argument for limit orders')
            request['price'] = self.price_to_precision(symbol, price)
        timeInForce = self.safe_string(params, 'timeInForce')
        if timeInForce is not None:
            request['time_in_force'] = timeInForce
        postOnly = self.safe_bool(params, 'postOnly')
        if postOnly is not None:
            request['postOnly'] = postOnly
        reduceOnly = self.safe_bool(params, 'reduceOnly')
        if reduceOnly is not None:
            request['reduceOnly'] = reduceOnly
        triggerPrice = self.safe_string(params, 'triggerPrice')
        if triggerPrice is not None:
            request['triggerPrice'] = self.price_to_precision(symbol, triggerPrice)
        stopPrice = self.safe_string(params, 'stopPrice')
        if stopPrice is not None:
            request['stopPrice'] = self.price_to_precision(symbol, stopPrice)
        takeProfitPrice = self.safe_string(params, 'takeProfitPrice')
        if takeProfitPrice is not None:
            request['takeProfitPrice'] = self.price_to_precision(symbol, takeProfitPrice)
        stopLossPrice = self.safe_string(params, 'stopLossPrice')
        if stopLossPrice is not None:
            request['stopLossPrice'] = self.price_to_precision(symbol, stopLossPrice)
        clientOrderId = self.safe_string(params, 'clOrderID')
        if clientOrderId is not None:
            request['clOrderID'] = clientOrderId
        params = self.omit(params, ['timeInForce', 'postOnly', 'reduceOnly', 'triggerPrice', 'stopPrice', 'takeProfitPrice', 'stopLossPrice', 'clOrderID'])
        response = self.privatePostApiV23Order(self.extend(request, params))
        order = response[0] if isinstance(response, list) else response
        return self.parse_order(order, market)

    def parse_order(self, order, market: Market = None) -> Order:
        marketId = self.safe_string(order, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        orderId = self.safe_string(order, 'orderID')
        clientOrderId = self.safe_string(order, 'clOrderID')
        timestamp = self.safe_integer(order, 'timestamp')
        side = self.safe_string_lower(order, 'side')
        type = self.safe_string_lower(order, 'type')
        price = self.safe_string(order, 'price')
        amount = self.safe_string(order, 'originalOrderSize')
        filled = self.safe_string(order, 'filledSize')
        remaining = self.safe_string(order, 'currentOrderSize')
        status = self.parse_order_status(self.safe_string(order, 'status'))
        average = self.safe_string(order, 'avgFillPrice')
        timeInForce = self.safe_string(order, 'timeInForce')
        postOnly = self.safe_bool(order, 'postOnly')
        reduceOnly = self.safe_bool(order, 'reduceOnly')
        triggerPrice = self.safe_string(order, 'triggerPrice')
        stopPrice = self.safe_string(order, 'stopPrice')
        return self.safe_order({
            'id': orderId,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'status': status,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'reduceOnly': reduceOnly,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'triggerPrice': triggerPrice,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'cost': None,
            'average': average,
            'trades': None,
            'fee': None,
            'info': order,
        }, market)

    def parse_order_status(self, status):
        statuses: dict = {
            '1': 'open',
            '2': 'open',
            '4': 'closed',
            '5': 'canceled',
            '6': 'open',
            '8': 'canceled',
            '9': 'canceled',
            '10': 'canceled',
            '15': 'rejected',
        }
        return self.safe_string(statuses, status, status)

    def cancel_order(self, id: str, symbol: Str = None, params={}) -> Order:
        """
        cancels an open order

        https://btsecom.github.io/docs/futuresV2_3/en/#order-2

        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.clOrderID]: client order id
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise InvalidOrder(self.id + ' cancelOrder() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        clientOrderId = self.safe_string(params, 'clOrderID')
        if clientOrderId is not None:
            request['clOrderID'] = clientOrderId
            params = self.omit(params, 'clOrderID')
        else:
            request['orderID'] = id
        response = self.privateDeleteApiV23Order(self.extend(request, params))
        return self.parse_order(response, market)

    def cancel_all_orders(self, symbol: Str = None, params={}):
        """
        cancel all open orders in a market

        https://btsecom.github.io/docs/futuresV2_3/en/#order-2

        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise InvalidOrder(self.id + ' cancelAllOrders() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = self.privateDeleteApiV23Order(self.extend(request, params))
        if isinstance(response, list):
            return self.parse_orders(response, market)
        return [self.parse_order(response, market)]

    def edit_order(self, id: str, symbol: str, type: OrderType, side: OrderSide, amount: float = None, price: float = None, params={}) -> Order:
        """
        edit a trade order

        https://btsecom.github.io/docs/futuresV2_3/en/#order-1

        :param str id: order id
        :param str symbol: unified symbol of the market to edit the order in
        :param str type: not used by btse editOrder
        :param str side: not used by btse editOrder
        :param float [amount]: how much you want to trade in units of the base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param float [params.triggerPrice]: price to trigger stop orders
        :param str [params.clOrderID]: client order id
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        clientOrderId = self.safe_string(params, 'clOrderID')
        if clientOrderId is not None:
            request['clOrderID'] = clientOrderId
            params = self.omit(params, 'clOrderID')
        else:
            request['orderID'] = id
        triggerPrice = self.safe_string(params, 'triggerPrice')
        if price is not None and amount is not None and triggerPrice is not None:
            request['type'] = 'ALL'
            request['orderPrice'] = self.price_to_precision(symbol, price)
            request['orderSize'] = self.amount_to_precision(symbol, amount)
            request['triggerPrice'] = self.price_to_precision(symbol, triggerPrice)
            params = self.omit(params, 'triggerPrice')
        elif price is not None and amount is not None:
            request['type'] = 'ALL'
            request['orderPrice'] = self.price_to_precision(symbol, price)
            request['orderSize'] = self.amount_to_precision(symbol, amount)
        elif price is not None:
            request['type'] = 'PRICE'
            request['value'] = self.price_to_precision(symbol, price)
        elif amount is not None:
            request['type'] = 'SIZE'
            request['value'] = self.amount_to_precision(symbol, amount)
        elif triggerPrice is not None:
            request['type'] = 'TRIGGERPRICE'
            request['value'] = self.price_to_precision(symbol, triggerPrice)
            params = self.omit(params, 'triggerPrice')
        else:
            raise InvalidOrder(self.id + ' editOrder() requires a price, amount, or triggerPrice argument')
        response = self.privatePutApiV23Order(self.extend(request, params))
        return self.parse_order(response, market)

    def fetch_open_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}):
        """
        fetch all unfilled currently open orders

        https://btsecom.github.io/docs/futuresV2_3/en/#query-open-orders

        :param str symbol: unified market symbol
        :param int [since]: not used by btse fetchOpenOrders
        :param int [limit]: not used by btse fetchOpenOrders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = None
        request: dict = {}
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        response = self.privateGetApiV23UserOpenOrders(self.extend(request, params))
        return self.parse_orders(response, market, since, limit)

    def fetch_order(self, id: str, symbol: Str = None, params={}) -> Order:
        """
        fetches information on an order made by the user

        https://btsecom.github.io/docs/futuresV2_3/en/#query-open-orders

        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.clOrderID]: client order id
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        request: dict = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        clientOrderId = self.safe_string(params, 'clOrderID')
        if clientOrderId is not None:
            request['clOrderID'] = clientOrderId
            params = self.omit(params, 'clOrderID')
        else:
            request['orderID'] = id
        response = self.privateGetApiV23UserOpenOrders(self.extend(request, params))
        if isinstance(response, list) and len(response) > 0:
            return self.parse_order(response[0], market)
        raise OrderNotFound(self.id + ' fetchOrder() could not find order ' + id)

    def fetch_my_trades(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}):
        """
        fetch all trades made by the user

        https://btsecom.github.io/docs/futuresV2_3/en/#query-trades-fills

        :param str symbol: unified market symbol
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum number of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.until]: timestamp in ms of the latest trade to fetch
        :param str [params.orderID]: filter trades by order ID
        :param str [params.clOrderID]: filter trades by client order ID
        :param bool [params.includeOld]: include trades older than 7 days
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        self.load_markets()
        market = None
        request: dict = {}
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        if since is not None:
            request['startTime'] = since
        until = self.safe_integer(params, 'until')
        if until is not None:
            request['endTime'] = until
            params = self.omit(params, 'until')
        if limit is not None:
            request['count'] = limit
        orderID = self.safe_string(params, 'orderID')
        if orderID is not None:
            request['orderID'] = orderID
            params = self.omit(params, 'orderID')
        clOrderID = self.safe_string(params, 'clOrderID')
        if clOrderID is not None:
            request['clOrderID'] = clOrderID
            params = self.omit(params, 'clOrderID')
        includeOld = self.safe_bool(params, 'includeOld')
        if includeOld is not None:
            request['includeOld'] = includeOld
            params = self.omit(params, 'includeOld')
        response = self.privateGetApiV23UserTradeHistory(self.extend(request, params))
        return self.parse_trades(response, market, since, limit)

    def fetch_positions(self, symbols: List[str] = None, params={}):
        """
        fetch all open positions

        https://btsecom.github.io/docs/futuresV2_3/en/#query-position

        :param str[] [symbols]: list of unified market symbols
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        self.load_markets()
        response = self.privateGetApiV23UserPositions(params)
        result = []
        for i in range(0, len(response)):
            position = response[i]
            parsed = self.parse_position(position)
            result.append(parsed)
        return self.filter_by_array_positions(result, 'symbol', symbols, False)

    def parse_position(self, position, market: Market = None) -> Position:
        marketId = self.safe_string(position, 'symbol')
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        sideString = self.safe_string(position, 'side')
        side = 'long' if (sideString == 'BUY') else 'short'
        contractsString = self.safe_string(position, 'size')
        entryPriceString = self.safe_string(position, 'entryPrice')
        markPriceString = self.safe_string(position, 'markPrice')
        unrealizedPnl = self.safe_string(position, 'unrealizedProfitLoss')
        liquidationPrice = self.safe_string(position, 'liquidationPrice')
        notional = self.safe_string(position, 'orderValue')
        marginType = self.safe_integer(position, 'marginType')
        marginMode = 'cross' if (marginType == 91) else 'isolated'
        return self.safe_position({
            'info': position,
            'id': self.safe_string(position, 'positionId'),
            'symbol': symbol,
            'timestamp': None,
            'datetime': None,
            'initialMargin': None,
            'initialMarginPercentage': None,
            'maintenanceMargin': self.safe_string(position, 'totalMaintenanceMargin'),
            'maintenanceMarginPercentage': None,
            'entryPrice': entryPriceString,
            'notional': notional,
            'leverage': None,
            'unrealizedPnl': unrealizedPnl,
            'contracts': contractsString,
            'contractSize': market['contractSize'],
            'marginRatio': None,
            'liquidationPrice': liquidationPrice,
            'markPrice': markPriceString,
            'collateral': None,
            'marginMode': marginMode,
            'side': side,
            'percentage': None,
        })

    def set_leverage(self, leverage: float, symbol: Str = None, params={}):
        """
        set the level of leverage for a market

        https://btsecom.github.io/docs/futuresV2_3/en/#set-leverage

        :param float leverage: the rate of leverage
        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: response from the exchange
        """
        if symbol is None:
            raise InvalidOrder(self.id + ' setLeverage() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'leverage': leverage,
        }
        response = self.privatePostApiV23Leverage(self.extend(request, params))
        return response

    def transfer(self, code: str, amount: float, fromAccount: str, toAccount: str, params={}) -> TransferEntry:
        """
        transfer currency internally between wallets on the same account

        https://btsecom.github.io/docs/futuresV2_3/en/#wallet-transfer

        :param str code: unified currency code
        :param float amount: amount to transfer
        :param str fromAccount: account to transfer from
        :param str toAccount: account to transfer to
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `transfer structure <https://docs.ccxt.com/#/?id=transfer-structure>`
        """
        self.load_markets()
        currency = self.currency(code)
        accountTypes: dict = {
            'spot': 'SPOT',
            'cross': 'CROSS',
            'isolated': 'ISOLATED',
        }
        fromType = self.safe_string(accountTypes, fromAccount, fromAccount)
        toType = self.safe_string(accountTypes, toAccount, toAccount)
        request: dict = {
            'walletSrcType': fromType,
            'walletDestType': toType,
            'apiWallets': [
                {
                    'currency': currency['id'],
                    'balance': self.currency_to_precision(code, amount),
                },
            ],
        }
        response = self.privatePostApiV23UserWalletTransfer(self.extend(request, params))
        return self.parse_transfer(response, currency)

    def parse_transfer(self, transfer: dict, currency: Currency = None) -> TransferEntry:
        return {
            'info': transfer,
            'id': self.safe_string(transfer, 'transferId'),
            'timestamp': self.safe_integer(transfer, 'timestamp'),
            'datetime': self.safe_string(transfer, 'datetime'),
            'currency': self.safe_currency_code(None, currency),
            'amount': None,
            'fromAccount': None,
            'toAccount': None,
            'status': None,
        }
